- name: Wait for Girder to be available
  wait_for:
    port: 8080

- name: Install Girder-Client
  pip:
    name: "girder-client"
    state: present
  become: yes
  become_user: root

- name: Create Girder User
  girder:
    port: 8080
    user:
      firstName: "girder"
      lastName: "girder"
      login: "girder"
      password: "girder"
      email: "girder@girder.girder"
      admin: yes
      state: present

- name: Enable Girder plugins
  girder:
    port: 8080
    username: "girder"
    password: "girder"
    plugins: "{{ girder_enabled_plugins }}"
    state: present

- name: Build Girder (web)
  command: "{{ girder_virtualenv }}/bin/girder-install web"
  args:
    chdir: "{{ girder_path }}"

- name: Restart Girder
  service:
    name: girder
    state: restarted
  become: yes
  become_user: root

- name: Wait for Girder to be available
  wait_for:
    port: 8080

- name: Set Worker API Url
  girder:
    port: 8080
    username: "girder"
    password: "girder"
    setting:
      key: "worker.api_url"
      value: "http://localhost:8080/api/v1"

- name: Setup filesystem assetstore
  girder:
    port: 8080
    username: "girder"
    password: "girder"
    assetstore:
      name: "Primary assetstore"
      type: "filesystem"
      root: "{{ ansible_user_dir }}/assetstore"
      current: true
    state: present

- name: Get Me
  girder:
    username: "girder"
    password: "girder"
    get:
      path: "user/me"
  register: token_ret

- name: Get my public folder
  girder:
    username: "girder"
    password: "girder"
    get:
      path: "folder"
      parameters:
        parentType: "user"
        parentId: "{{ token_ret['gc_return']['_id'] }}"
        text: "Public"
  register: public_folder_ret

- set_fact:
    public_folder_id: "{{ public_folder_ret['gc_return'][0]['_id'] }}"

- name: Load DockerHub images into item_tasks
  girder:
    username: "girder"
    password: "girder"
    post:
      path: "item_task/{{ public_folder_id }}/json_description"
      parameters:
        image: "{{ item }}"
  with_items: "{{ item_tasks_dockerhub_images }}"
  register: job_return

- name: Wait for Dockerhub images to be ingested successfully as item_tasks
  girder:
    username: 'girder'
    password: 'girder'
    get:
      path: "job/{{ item['gc_return']['_id'] }}"
  register: job_result
  when: job_return
  until: job_result['gc_return']['status'] == 3
  retries: 5
  delay: 10
  with_items: "{{ job_return['results'] }}"
