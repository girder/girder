[tox]
envlist = lint,pytest

[testenv:pytest]
passenv =
    DOCKER_HOST
deps =
    -rrequirements-dev.txt
commands =
    pytest --forked {posargs}

[testenv:lint]
skip_install = true
skipsdist = true
deps =
    flake8
    flake8-bugbear
    flake8-docstrings
    flake8-quotes
    pep8-naming
commands =
    flake8 {posargs}

[testenv:format]
skip_install = true
skipsdist = true
deps =
  autopep8
  unify
commands =
  autopep8 -ria .
  unify --in-place --recursive .

[testenv:docs]
# readthedocs.org runs "python setup.py install" (which installs no dependencies). With the
# limitations of Tox (not being able to use a different install_command for deps installation and
# package installation) and the desire to install cleanly via pip (instead of directly with
# setuptools), skip_install and an explicit "pip install" run command seems to be the best
# configuration possible.
skip_install = true
skipsdist = true
# Building docs has a direct dependency on Sphinx. Documentation dependencies are listed in a
# separate file to allow readthedocs.org to read and install them.
deps =
    -rdocs/requirements-docs.txt
setenv =
    GIRDER_SPHINX_BUILD = true
commands =
    pip install --editable . --editable clients/python --editable ./worker
    sphinx-build \
        -W \
        -b html \
        -d {envtmpdir}/doctrees \
        docs \
        build/docs/python

[testenv:coverage]
skip_install = true
skipsdist = true
deps =
    coverage
commands =
    coverage combine
    coverage report
    coverage html
    coverage xml

[testenv:publish]
allowlist_externals =
    {toxinidir}/.circleci/publish_pypi.sh
skip_install = true
skipsdist = true
passenv =
    CIRCLE_BRANCH
    TWINE_USERNAME
    TWINE_PASSWORD
deps =
    build
    setuptools-git
    setuptools-scm
    twine
commands =
    {toxinidir}/.circleci/publish_pypi.sh

[testenv:public_names]
allowlist_externals =
    {toxinidir}/scripts/test_names.sh
commands =
    {toxinidir}/scripts/test_names.sh

[testenv:pytest_circleci]
passenv =
    DOCKER_HOST
deps =
    {[testenv:pytest]deps}
commands =
    coverage erase
    pytest \
        --tb=long \
        --junit-xml="build/test/results/pytest.xml" \
        --cov \
        --cov-append \
        --cov-report="" \
        --keep-db \
        --forked \
        {posargs}

[flake8]
max-line-length = 100
show-source = True
max-complexity = 14
format = pylint
exclude =
    node_modules,
    .eggs,
    .git,
    __pycache__,
    .tox
ignore =
    # B019 - Use of `functools.lru_cache` or `functools.cache` on methods can lead to memory leaks.
    B019,
    # B027 - Consider adding @abstractmethod.
    B027,
    # D10 - Missing docstring (errors D100 - D107)
    D10,
    # D200 - One-line docstrings should fit on one line with quotes.
    D200,
    # D205 - Blank line required between one-line summary and description.
    D205,
    # D400 - First line should end with a period.
    D400,
    # D401 - First line should be in imperative mood.
    D401,
    # E123 - Closing bracket does not match indentation of opening bracket's line
    E123,
    # F824 - Name is never used in scope
    F824,
    # N802 - Function name should be lowercase.
    N802,
    # N803 - Argument name should be lowercase.
    N803,
    # N806 - Variable in function should be lowercase.
    N806,
    # N812 - Lowercase imported as non lowercase.
    N812,
    # N815 - mixedCase variable in class scope
    N815,
    # N816 - mixedCase variable in global scope
    N816,
    # N818 - error suffix in exception name
    N818,
    # Q003 - Change outer quotes to avoid escaping inner quotes
    Q003,
    # W503 - Line break occurred before a binary operator
    W503,

[pytest]
addopts = --verbose --strict --showlocals
cache_dir = build/test/pytest_cache
junit_family = xunit2
testpaths = test
